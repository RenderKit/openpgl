# This is a basic workflow to help you get started with Actions

name: CI

permissions: read-all

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "devel" branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  ## Build Jobs ##
  ### Build Linux Jobs ###
  build-rocky87:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: rockylinux:8.7
      cmd: |
        scripts/build.sh

  build-rocky87-icx:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      submodules: true
      image: rockylinux:8.7
      #artifact-out: build-centos7-icx
      #artifact-path: ./build/install ./build/openvkl/build
      cmd: |
        module load cmake/3.25.3
        module load intel/2024.1.0
        export CC=icx
        export CXX=icpx
        export CXXFLAGS="-fPIC -fp-model=precise"
        export LDFLAGS="-static-intel"
        scripts/build.sh

  build-centos8:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: centos:8
      cmd: |
        scripts/build.sh


  #build-ubuntu16-04:
  #  secrets: inherit
  #  uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
  #  with:
  #    image: ospray/docker-images:ubuntu16.04
  #    # artifact-name: build-ubuntu1804-gcc_artifact
  #    cmd: |
  #      scripts/build.sh


  build-ubuntu20-04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:20.04
      cmd: |
        scripts/build.sh

  build-ubuntu22-04:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: ubuntu:22.04
      cmd: |
        scripts/build.sh

  build-arch:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: archlinux:latest
      cmd: |
        scripts/build.sh
  
  ### Build Windows Jobs ###

  build-windows-msvc15:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      cmd: |
          scripts/build.bat "Visual Studio 15 2017 Win64" "v141" '"-DTBB_VERSION=2021.1.1"' '"-DTBB_HASH="""'           

  build-windows-icx:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      shell: cmd
      cmd: |
        call "C:\Program Files (x86)\Intel\oneAPI\compiler\latest\env\vars.bat"
        set CXX=icx.exe
        set CC=icx.exe
        Powershell.exe -ExecutionPolicy RemoteSigned -File scripts\build_win.ps1 Ninja -DTBB_VERSION=2021.1.1 -DTBB_HASH="" -DBUILD_TOOLS=ON          

  #build-windows-arm64-msvc:
  #  secrets: inherit
  #  uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
  #  with:
  #    runs-on: '["Windows", "ARM64"]'
  #    cmd: |
  #        scripts/build.bat "Visual Studio 17 2022" "v143" '"-A ARM64"' '"-DBUILD_TBB_FROM_SOURCE=ON"'  '"-DDOWNLOAD_ISPC=OFF"' '"-DBUILD_OIDN=OFF"'

  build-windows-arm64-llvm:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      runs-on: '["Windows", "ARM64"]'
      shell: cmd
      cmd: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsarm64.bat"
        set CXX=clang-cl.exe
        set CC=clang-cl.exe
        Powershell.exe -ExecutionPolicy RemoteSigned -File scripts\build_win.ps1 Ninja -DBUILD_TBB_FROM_SOURCE=ON -DBUILD_TBB_FROM_SOURCE=ON -DBUILD_TBB_FROM_SOURCE=ON -DDOWNLOAD_ISPC=ON -DBUILD_OIDN=ON

  ### Build MacOS Jobs ###

  build-macOS:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "avx2", "x86_64" ]'
      cmd: |
          scripts/build_mac.sh

  #build-macOS-icc:
  #  secrets: inherit
  #  uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
  #  with:
  #    runs-on: '[ "macOS", "build", "avx2", "x86_64" ]'
  #    cmd: |
  #        export CC=icc
  #        export CXX=icpc
  #        export CXXFLAGS="-static-intel -fPIC"
  #        scripts/build_mac.sh

  build-macOS-arm-old:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      runs-on: '[ "macOS", "arm", "vis-mac-mini-m1-2" ]'
      cmd: |
          scripts/build_mac.sh -DBUILD_TBB_FROM_SOURCE=ON

  build-macOS-arm-new:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      runs-on: '[ "macOS", "build", "arm", "vis-mac-mini-m1-1" ]'
      cmd: |
          scripts/build_mac.sh -DBUILD_TBB_FROM_SOURCE=ON

  ### KW Jobs ###

  kw-build-scan-report:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/static_analysis.yml@main
    with:
      project: OpenPGL
      #submodules: true
      coverity: true
      prebuild: > 
        export LD_LIBRARY_PATH=`pwd`/build_deps/install/lib:${LD_LIBRARY_PATH} &&
        cmake -S superbuild -B build_deps -DBUILD_JOBS=`nproc` -DBUILD_DEPENDENCIES_ONLY=ON &&
        cmake --build build_deps &&
        DEP_INSTALL_DIR=build_deps/install &&
        cmake -S . -B build -DTBB_ROOT=$DEP_INSTALL_DIR -DCMAKE_PREFIX_PATH=$DEP_INSTALL_DIR
      build: cmake --build build

  ### Protex Jobs ###

  ## Release Jobs ##

  release-linux:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/docker.yml@main
    with:
      image: rockylinux:8.7
      cmd: |
        export OPENPGL_RELEASE_PACKAGE_VERSION=0.8.0
        scripts/release/linux.sh
      artifact-out: release-linux
      artifact-path: ./openpgl*.gz

  release-windows:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/windows.yml@main
    with:
      submodules: true
      runs-on: '[ "Windows", "build" ]'
      artifact-out: release-windows
      artifact-path: ./openpgl*.zip
      cmd: |
        $env:OPENPGL_RELEASE_PACKAGE_VERSION="0.8.0"
        $OPENPGL_RELEASE_PACKAGE_VERSION="0.8.0"
        scripts/release/windows.ps1 "Visual Studio 15 2017 Win64" "v141"

  release-macos:
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
    with:
      submodules: true
      runs-on: '[ "macOS", "sign", "avx2", "x86_64" ]'
      artifact-out: release-macos
      artifact-path: ./*.zip
      cmd: |
        export OPENPGL_RELEASE_PACKAGE_VERSION="0.8.0"
        scripts/release/macos.sh

  #release-macos-arm:
  #  secrets: inherit
  #  uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/macos.yml@main
  #  with:
  #    submodules: true
  #    runs-on: '[ "macOS", "sign", "arm" ]'
  #    artifact-out: release-macos-arm
  #    artifact-path: ./*.zip
  #    cmd: |
  #      export OPENPGL_RELEASE_PACKAGE_VERSION="0.8.0"
  #      scripts/release/macos.sh -DBUILD_TBB_FROM_SOURCE=ON

  ## Binary Scan Jobs ##

  binary-analysis:
    needs: 
      - release-linux
      - release-macos
      - release-windows
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/binary_analysis.yml@main
    with:
      project: openpgl
      artifact-in-linux: release-linux
      artifact-in-macos: release-macos
      artifact-in-windows: release-windows
      path: "./openpgl*.gz ./openpgl*.zip"

  antivirus-scan:
    needs:
      - release-linux
      - release-macos
      - release-windows
    secrets: inherit
    uses: intel-innersource/libraries.devops.renderkit.workflows/.github/workflows/antivirus_scan.yml@main
    with:
      project: openpgl
      artifact-in-linux: release-linux
      artifact-in-macos: release-macos
      artifact-in-windows: release-windows
      path: "./openpgl*.gz ./openpgl*.zip"

